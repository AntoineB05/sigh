// This file showcases every single syntactic feature in the language.

fun array_add (a: Int[]): Int
{
    fun add (a: Int, b: Int): Int {
        return add2(a, b) // works!

        fun add2 (a: Int, b: Int): Int {
            return a + b
        }
    }

    if (a.length == 0)
        return 0

    var i: Int = 1
    var result: Int = a[0]

    switch(i){
            case 1{
                print("i=1")
            }

            case 2{
                print("i=2")
            }
            default{
                print("default")
            }

        }
        var t : Bool = i is Int

    while i < a.length {
        result = add(result, a[i])
        i = i + 1
    }

    return result
}

var total: Int = array_add([1, 2, 3])
var float_total: Float = total + 0.0

var math: Int = 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

fun validate5 (value: Int)
{
    if (value!= 5)
        print("We wanted 5 but got: " + value)

    if (value > 5)
        print("It was too big.")
    else if (value < 5)
        print("It was too small.")
    else
        print("It's just right.")
}

struct Pair {
    var a: Int
    var b: Int
}
var pair : Pair = $Pair (0 ,1)
var isPair : Bool = pair is Pair
var isInt : Bool = pair is Int
print("" + isPair)
print("" + isInt)

switch(pair) {
    case (0,0){
        // code block
        print("a is 0 and b is 0")
    }
    case (_,1){
        // code block
        print("b is 1")
    }
    default{
        // code block
        print("something else")
    }
}

struct S {
    var b: Bool
    var p: Pair
}
var s : S = $S(true,null)
switch(s) {
    case (true,_) {
        print("s.b is true and s.p is equal to pair")
    }
    case (false,_) {
        print("s.b is false")
    }
}
print(""+ (s.p==null))

var type: Type = Pair
print("" + type)

fun sum_pair (pair: Pair): Int {
    return pair.a + pair.b
}

validate5(sum_pair($Pair(2, 3)))

fun use_array (array: Int[]) {}

var intArray: Int[] = []
var stringArray: String[] = []
use_array([])